name: Server Unit Test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  server-unit-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:14
    defaults:
      run:
        working-directory: ./server

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          cache: "yarn"
          cache-dependency-path: "**/yarn.lock"

      - name: Install dependencies
        run: yarn

      - name: Set env files
        run: 'echo "$PRODUCTION_TEST_E2E" > .env'
        env:
          PRODUCTION_TEST_E2E: ${{ secrets.PRODUCTION_TEST_E2E }}

      - name: Run unit test
        run: yarn test
